system_template: |-
  SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.

  The special interface consists of a file editor that shows you {WINDOW} lines of a file at a time.
  In addition to typical bash commands, you can also use the following commands to help you navigate and edit files.

  COMMANDS:
  {command_docs}

  Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION. 
  If you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.

  RESPONSE FORMAT:
  Your shell prompt is formatted as follows:
  (Open file: <path>) <cwd> $

  You need to format your output using two fields; discussion and command.
  Your output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:
  DISCUSSION
  First I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.
  ```
  ls -a
  ```

  You should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.
  If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command. 
  You're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.
  However, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.
  

instance_template: |-
  We're currently solving the following issue within our repository. Here's the issue text:
  ISSUE:
  {issue}

  INSTRUCTIONS:
  Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want. 
  Remember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command. 
  When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.
  Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.

  IMPORTANT TIPS:
  1a. IMPORTANT: First step without fail must always be to check the files in the main repo. You can do this by running the `ls -F` action. This will show you all the files in the current directory and be useful for making future decisions.
  
  2. Once done with above, we recommend to start by trying to replicate the bug that the issues discusses. 
     If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.
     Then start trying to fix it.
     When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.
     
     If the bug reproduction script does not print anything when it succesfully runs, we recommend adding a print("Script completed successfully, no errors.") command at the end of the file,
     so that you can be sure that the script indeed ran fine all the way through. 

  2b. IMPORTANT: Note that the environment usually including the conda env and all packages will already be installed for you. However, if you have trouble reproducing the github issue due to some errors, you can and should install the required packages required using standard bash commands (except the root repo package since that is installed in edit mode and should not be replaced). Remember you are root in the docker by default, so system level packages (if needed) can be installed without sudo.

  3. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!

  4. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker. 
     
  5. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file "buggy-input.png" If that doensn't work, use the linux 'find' command. 

  6. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.

  7. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.
    
  8. MOST IMPORTANT: You should assign / delegate smaller subtasks (e.g. reproducing the issue) other agents using 'subtask_execute' action. This will allow you to spend most of your time on more complex tasks and also be able to plan better.

  9. You should work in high-level action space (leveraging subagents), and use subagents for low-entropy subtasks.

  10. Do not redo the effort of other agents (e.g. reproduction script). If you see that another agent has already done something, you should not redo it. You should build on top of it.

  11. Remember your goal is to solve the bug/issue as efficiently as possible while minimizing the chances of making a mistake.
     CRITICAL NOTICE:  you are being told a million times --> Take note of the traceback error and try to sequentially trace it back to where the error is coming from. Dont blindly try to make changes without understanding the source of the error.


  NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line! 
  If you try an edit and it fails once, just pass it to a subagent to make the edit. They will handle the syntax and indentation for you.

  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_template: |-
  {observation}
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
next_step_no_output_template: |-
  Your command ran successfully and did not produce any output.
  (Open file: {open_file})
  (Current directory: {working_dir})
  bash-$
demonstration_template: |-
  Here are some demonstrations of how to correctly accomplish this task.
  It is included to show you how to correctly use the interface.
  The demonstration shows how to use subagents for delegating subtasks (e.g. reproducing the issue) to other agents.
  You can use a mixture of both low-level (e.g. ls -F) and high-level (subtask_execute) commands to solve the issue. but mainly rely on high level thinking and use the subagents for low-entropy subtasks. 
  PLEASE DO USE THE SUBTASK_EXECUTE COMMAND. WORK IN HIGHER LEVEL ABSTRACTION SPACE.
  You do not need to follow exactly what is done in the demonstration.
  --- DEMONSTRATION ---
  {demonstration}
  --- END OF DEMONSTRATION ---
demonstration_template2: |-
  Here are some demonstrations of how to correctly accomplish this task.
  It is included to show you how to correctly use the interface.
  The first demonstration shows how to use subagents for delegating some less complex tasks (e.g. reproducing the issue) to other agents.
  The second demonstration shows how to solve the issue on your own without any delegation of subtasks.
  You should use a mixture of both mainly using subagents for less complex and low-entropy subtasks.
  You do not need to follow exactly what is done in the demonstration.
  --- DEMONSTRATION ---
  {demonstration}
  --- END OF DEMONSTRATION ---
demonstration_template_old: |-
  Here is a demonstration of how to correctly accomplish this task.
  It is included to show you how to correctly use the interface.
  You do not need to follow exactly what is done in the demonstration.
  --- DEMONSTRATION ---
  {demonstration}
  --- END OF DEMONSTRATION ---
state_command:
  name: state
  code: |
    state() {
      local working_dir="$PWD";
      if [ -z $CURRENT_FILE ]; then
          echo '{"open_file": "n/a", "working_dir": "'$working_dir'"}';
      else
          echo '{"open_file": "'$(realpath $CURRENT_FILE)'", "working_dir": "'$working_dir'"}';
      fi
    };
parse_function: ThoughtActionParser
env_variables:
  WINDOW: 100
  OVERLAP: 2
  CURRENT_LINE: 0
  CURRENT_FILE: ''
  SEARCH_RESULTS: ()
  SEARCH_FILES: ()
  SEARCH_INDEX: 0
command_files:
- config/commands/subtask_execute.sh
- config/commands/defaults.sh
- config/commands/search.sh
- config/commands/edit_linting.sh
- config/commands/_split_string.py
parse_command: ParseCommandDetailed
history_processor: DefaultHistoryProcessor
demonstrations:
- demonstrations/hepllm/root-level-marshmallow-code__marshmallow-1867.traj
# - demonstrations/hepllm/marshmallow-code__marshmallow-1867.traj